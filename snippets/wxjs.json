{
  "wxapp": {
    "prefix": "app",
    "body": [
      "//app.js",
      "App({",
      "\t//onLaunch,onShow: options(path,query,scene,shareTicket,referrerInfo(appId,extraData))",
      "\tonLaunch: function(options){",
      "\t\t${1}",
      "\t},",
      "\tonShow: function(options){",
      "\r\n\t},",
      "\tonHide: function(){",
      "\r\n\t},",
      "\tonError: function(msg){",
      "\r\n\t},",
      "\t//options(path,query,isEntryPage)",
      "\tonPageNotFound: function(options){",
      "\r\n\t},",
      "\tglobalData: {",
      "\t\t${2}",
      "\t}",
      "});"
    ],
    "description": "App对象及其生命周期函数和回调函数"
  },
  "wxpage": {
    "prefix": "page",
    "body": [
      "//Page Object",
      "Page({",
      "\tdata: {",
      "\t\t${1}",
      "\t},",
      "\t//options(Object)",
      "\tonLoad: function(options){",
      "\t\t${2}",
      "\t},",
      "\tonReady: function(){",
      "\t\t${3}",
      "\t},",
      "\tonShow: function(){",
      "\t\t${4}",
      "\t},",
      "\tonHide: function(){",
      "\r\n\t},",
      "\tonUnload: function(){",
      "\r\n\t},",
      "\tonPullDownRefresh: function(){",
      "\r\n\t},",
      "\tonReachBottom: function(){",
      "\r\n\t},",
      "\tonShareAppMessage: function(){",
      "\r\n\t},",
      "\tonPageScroll: function(){",
      "\r\n\t},",
      "\t//item(index,pagePath,text)",
      "\tonTabItemTap:function(item){",
      "\r\n\t}",
      "});"
    ],
    "description": "Page对象及其生命周期函数和回调函数"
  },
  "wxComponent": {
    "prefix": "component",
    "body": [
      "//Component Object",
      "Component({",
      "\tproperties: {",
      "\t\t${1:myProperty}:{",
      "\t\t\ttype:${2:String},",
      "\t\t\tvalue:${3:''},",
      "\t\t\tobserver: function(){${4}}",
      "\t\t},",
      "\r\n\t},",
      "\tdata: {",
      "\r\n\t},",
      "\tmethods: {",
      "\t\t${5}",
      "\t},",
      "\tcreated: function(){",
      "\r\n\t},",
      "\tattached: function(){",
      "\r\n\t},",
      "\tready: function(){",
      "\r\n\t},",
      "\tmoved: function(){",
      "\r\n\t},",
      "\tdetached: function(){",
      "\r\n\t},",
      "});"
    ],
    "description": "Component对象及其生命周期函数和回调函数"
  },
  "getCurrentPages": {
    "prefix": "getCurrentPages",
    "body": ["${1:let curPages = } getCurrentPages();", "${2}"],
    "description": "获取当前页面栈"
  },
  "page-function": {
    "prefix": "page-function",
    "body": ["${1:functionName}: function () {", "\t${2}", "}"],
    "description": "获取小程序实例"
  },
  "getApp": {
    "prefix": "getApp",
    "body": ["${1:const app = } getApp();"],
    "description": "获取小程序实例"
  },
  "wxRequire": {
    "prefix": "require",
    "body": ["const ${1:module}  = require(\"${2}\");"],
    "description": "require加载模块"
  },
  "wxImportAll": {
    "prefix": "import-all",
    "body": ["import * as ${1:module} from \"${2}\";"],
    "description": "import加载所有"
  },
  "wxImportObject": {
    "prefix": "import-object",
    "body": ["import {${1}} from \"${2}\";"],
    "description": "import加载对象"
  },
  "wx.request": {
    "prefix": "request",
    "body": [
      "${1:let request = }wx.request({",
      "\turl: '${2}',",
      "\tdata: {${3}},",
      "\theader: {${4:'content-type':'application/json'}},",
      "\tmethod: '${5:GET}',",
      "\tdataType: '${6:json}',",
      "\tresponseType: '${7:text}',",
      "\tsuccess: (result)=>{",
      "\t\t${8}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "发起网络请求"
  },
  "wx.uploadFile": {
    "prefix": "upload",
    "body": [
      "${1:let upload = }wx.uploadFile({",
      "\turl: '${2}',",
      "\tfilePath: ${3},",
      "\tname: ${4},",
      "\tformData: {${5}},",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 content-type 为 multipart/form-data。"
  },
  "upTask.onProgressUpdate": {
    "prefix": "upTask-onProgressUpdate",
    "body": ["upTask.onProgressUpdate((result)=>{", "\t\t${1}", "\t});"],
    "description": "监听上传进度变化事件。"
  },
  "upTask.abort": {
    "prefix": "upTask-abort",
    "body": ["upTask.abort();"],
    "description": "中断上传任务。"
  },
  "wx.downloadFile": {
    "prefix": "download",
    "body": [
      "${1:let download = }wx.downloadFile({",
      "\turl: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "下载文件资源到本地，客户端直接发起一个HTTP GET请求，返回文件的本地临时路径。"
  },
  "downTask.onProgressUpdate": {
    "prefix": "downTask-onProgressUpdate",
    "body": ["downTask.onProgressUpdate((result)=>{", "\t\t${1}", "\t});"],
    "description": "监听下载进度变化事件。"
  },
  "downTask.abort": {
    "prefix": "downTask-abort",
    "body": ["downTask.abort();"],
    "description": "中断下载任务。"
  },
  "wx.connectSocket": {
    "prefix": "connectSocket",
    "body": [
      "${1:let sockTask = }wx.connectSocket({",
      "\turl: '${2}',",
      "\theader: {${3:'content-type':'application/json'}},",
      "\tmethod: '${4:GET}',",
      "\tprotocols: [${5}],",
      "\tsuccess: ()=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "创建一个WebSocket连接。"
  },
  "wx.onSocketOpen": {
    "prefix": "wx-onSocketOpen",
    "body": ["wx.onSocketOpen(${1:result} => {", "\t${2}", "});"],
    "description": "监听WebSocket连接打开事件。"
  },
  "wx.onSocketError": {
    "prefix": "wx-onSocketError",
    "body": ["wx.onSocketError(${1:result} => {", "\t${2}", "});"],
    "description": "监听WebSocket错误。"
  },
  "wx.sendSocketMessage": {
    "prefix": "wx-sendSocketMessage",
    "body": [
      "wx.sendSocketMessage({",
      "\tdata: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "通过WebSocket连接发送数据，需要先wx.connectSocket，并在wx.onSocketOpen回调之后才能发送。"
  },
  "wx.onSocketMessage": {
    "prefix": "wx-onSocketMessage",
    "body": ["wx.onSocketMessage((${1:result})=>{${2}});"],
    "description": "监听WebSocket接受到服务器的消息事件。"
  },
  "wx.closeSocket": {
    "prefix": "wx-closeSocket",
    "body": [
      "wx.closeSocket({",
      "\tcode: ${1:1000},",
      "\treason: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭WebSocket连接。"
  },
  "wx.onSocketClose": {
    "prefix": "wx-onSocketClose",
    "body": ["wx.onSocketClose((${1:result})=>{", "\t${2}", "});"],
    "description": "监听WebSocket关闭。"
  },
  "sockTask.send": {
    "prefix": "sockTask-send",
    "body": [
      "sockTask.send({",
      "\tdata: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "通过WebSocket连接发送数据。"
  },
  "sockTask.close": {
    "prefix": "sockTask-close",
    "body": [
      "sockTask.close({",
      "\tcode: ${1},",
      "\treason: ${2},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭WebSocket连接。"
  },
  "sockTask.onOpen": {
    "prefix": "sockTask-onOpen",
    "body": ["sockTask.onOpen(${1:result} => {", "\t${2}", "});"],
    "description": "监听WebSocket连接打开事件。"
  },
  "sockTask.onClose": {
    "prefix": "sockTask-onClose",
    "body": ["sockTask.onClose(${1:result} => {", "\t${2}", "});"],
    "description": "监听 WebSocket 连接关闭事件。"
  },
  "sockTask.onError": {
    "prefix": "sockTask-onError",
    "body": ["sockTask.onError(${1:result} => {", "\t${2}", "});"],
    "description": "监听 WebSocket 错误。"
  },
  "sockTask.onMessage": {
    "prefix": "sockTask-onMessage",
    "body": ["sockTask.onMessage(${1:result} => {", "\t${2}", "});"],
    "description": "监听WebSocket接受到服务器的消息事件。"
  },
  "wx.chooseImage": {
    "prefix": "wx-chooseImage",
    "body": [
      "wx.chooseImage({",
      "\tcount: ${1:9},",
      "\tsizeType: ${2:['original','compressed']},",
      "\tsourceType: ${3:['album','camera']},",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "从本地相册选择图片或使用相机拍照。"
  },
  "wx.previewImage": {
    "prefix": "wx-previewImage",
    "body": [
      "wx.previewImage({",
      "\tcurrent: '${1}',",
      "\turls: [${2}],",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "预览图片。"
  },
  "wx.getImageInfo": {
    "prefix": "wx-getImageInfo",
    "body": [
      "wx.getImageInfo({",
      "\tsrc: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取图片信息，倘若为网络图片，需先配置download域名才能生效。"
  },
  "wx.saveImageToPhotosAlbum": {
    "prefix": "wx-saveImageToPhotosAlbum",
    "body": [
      "wx.saveImageToPhotosAlbum({",
      "\tfilePath: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "保存图片到系统相册。需要用户授权 scope.writePhotosAlbum"
  },
  "wx.startRecord": {
    "prefix": "wx-startRecord",
    "body": [
      "wx.startRecord({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始录音。需要用户授权 scope.record。1.6.0 起不再维护"
  },
  "wx.stopRecord": {
    "prefix": "wx-stopRecord",
    "body": ["wx.stopRecord();"],
    "description": "停止录音。1.6.0 起不再维护"
  },
  "wx.getRecorderManager": {
    "prefix": "wx-getRecorderManager",
    "body": ["${1:let recordManager = }wx.getRecorderManager();"],
    "description": "获取全局唯一的录音管理器recorderManager。"
  },
  "recordManager.start": {
    "prefix": "recordManager-start",
    "body": [
      "recordManager.start({",
      "\tduration: ${1},",
      "\tsampleRate: ${2:44100},",
      "\tnumberOfChannels: ${3:2},",
      "\tformat: ${4:'aac'}",
      "});"
    ],
    "description": "开始录音"
  },
  "recordManager.pause": {
    "prefix": "recordManager-pause",
    "body": ["recordManager.pause();"],
    "description": "暂停录音"
  },
  "recordManager.resume": {
    "prefix": "recordManager-resume",
    "body": ["recordManager.resume();"],
    "description": "恢复录音"
  },
  "recordManager.stop": {
    "prefix": "recordManager-stop",
    "body": ["recordManager.stop();"],
    "description": "停止录音"
  },
  "recordManager.onStart": {
    "prefix": "recordManager-onStart",
    "body": ["recordManager.onStart((${1})=>{", "\t${2}", "});"],
    "description": "录音开始事件"
  },
  "recordManager.onPause": {
    "prefix": "recordManager-onPause",
    "body": ["recordManager.onPause((${1})=>{", "\t${2}", "});"],
    "description": "录音暂停事件"
  },
  "recordManager.onStop": {
    "prefix": "recordManager-onStop",
    "body": ["recordManager.onStop((${1:result})=>{", "\t${2}", "});"],
    "description": "录音停止事件，会回调文件地址"
  },
  "recordManager.onFrameRecorded": {
    "prefix": "recordManager-onFrameRecorded",
    "body": ["recordManager.onFrameRecorded((${1:result})=>{", "\t${2}", "});"],
    "description": "已录制完指定帧大小的文件，会回调录音分片结果数据"
  },
  "recordManager.onError": {
    "prefix": "recordManager-onError",
    "body": ["recordManager.onError((${1:errMsg})=>{", "\t${2}", "});"],
    "description": "录音错误事件, 会回调错误信息"
  },
  "wx.playVoice": {
    "prefix": "wx-playVoice",
    "body": [
      "wx.playVoice({",
      "\tfilePath: '${1}',",
      "\tduration: ${2:60},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。1.6.0 起不再维护"
  },
  "wx.pauseVoice": {
    "prefix": "wx-pauseVoice",
    "body": ["wx.pauseVoice();"],
    "description": "暂停正在播放的语音。1.6.0 起不再维护"
  },
  "wx.stopVoice": {
    "prefix": "wx-stopVoice",
    "body": ["wx.stopVoice();"],
    "description": "结束播放语音。1.6.0 起不再维护"
  },
  "wx.getBackgroundAudioPlayerState": {
    "prefix": "wx-getBackgroundAudioPlayerState",
    "body": [
      "wx.getBackgroundAudioPlayerState({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取后台音乐播放状态。1.2.0 起不再维护"
  },
  "wx.playBackgroundAudio": {
    "prefix": "wx-playBackgroundAudio",
    "body": [
      "wx.playBackgroundAudio({",
      "\tdataUrl: '${1}',",
      "\ttitle: '${2}',",
      "\tcoverImgUrl: '${3}',",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。1.2.0 起不再维护"
  },
  "wx.pauseBackgroundAudio": {
    "prefix": "wx-pauseBackgroundAudio",
    "body": ["wx.playBackgroundAudio();"],
    "description": "暂停播放音乐。1.2.0 起不再维护"
  },
  "wx.seekBackgroundAudio": {
    "prefix": "wx-seekBackgroundAudio",
    "body": [
      "wx.seekBackgroundAudio({",
      "\tposition: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "控制音乐播放进度(秒)。1.2.0 起不再维护"
  },
  "wx.stopBackgroundAudio": {
    "prefix": "wx-stopBackgroundAudio",
    "body": ["wx.stopBackgroundAudio();"],
    "description": "停止播放音乐。1.2.0 起不再维护"
  },
  "wx.onBackgroundAudioPlay": {
    "prefix": "wx-onBackgroundAudioPlay",
    "body": ["wx.onBackgroundAudioPlay((${1:result})=>{${2}});"],
    "description": "监听音乐播放。1.2.0 起不再维护"
  },
  "wx.onBackgroundAudioPause": {
    "prefix": "wx-onBackgroundAudioPause",
    "body": ["wx.onBackgroundAudioPause((${1:result})=>{${2}});"],
    "description": "监听音乐暂停。1.2.0 起不再维护"
  },
  "wx.onBackgroundAudioStop": {
    "prefix": "wx-onBackgroundAudioStop",
    "body": ["wx.onBackgroundAudioStop((${1:result})=>{${2}});"],
    "description": "监听音乐停止。1.2.0 起不再维护"
  },
  "wx.getBackgroundAudioManager": {
    "prefix": "wx-getBackgroundAudioManager",
    "body": [
      "// properties(Read only)(duration,currentTime,paused,buffered)",
      "// properties(src(m4a, aac, mp3, wav),startTime,title,epname,singer,coverImgUrl,webUrl,protocol)",
      "${1:let backAudioManager = }wx.getBackgroundAudioManager();"
    ],
    "description": "获取全局唯一的背景音频管理器 backgroundAudioManager。"
  },
  "backAudioManager.src": {
    "prefix": "backAudioManager-src",
    "body": ["backAudioManager.src = ${1};"],
    "description": "音频的数据源，默认为空字符串，当设置了新的 src 时，会自动开始播放 ，目前支持的格式有 m4a, aac, mp3, wav。"
  },
  "backAudioManager.play": {
    "prefix": "backAudioManager-play",
    "body": ["backAudioManager.play();"],
    "description": "播放"
  },
  "backAudioManager.pause": {
    "prefix": "backAudioManager-pause",
    "body": ["backAudioManager.pause();"],
    "description": "暂停"
  },
  "backAudioManager.stop": {
    "prefix": "backAudioManager-stop",
    "body": ["backAudioManager.stop();"],
    "description": "停止"
  },
  "backAudioManager.seek": {
    "prefix": "backAudioManager-seek",
    "body": ["backAudioManager.seek(${1});"],
    "description": "跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度。"
  },
  "backAudioManager.onCanplay": {
    "prefix": "backAudioManager-onCanplay",
    "body": ["backAudioManager.onCanplay(${1:()=>{", "\t\t${2}", "\t}});"],
    "description": "背景音频进入可以播放状态，但不保证后面可以流畅播放"
  },
  "backAudioManager.onPlay": {
    "prefix": "backAudioManager-onPlay",
    "body": ["backAudioManager.onPlay(()=>{", "\t${1}", "});"],
    "description": "背景音频播放事件"
  },
  "backAudioManager.onPause": {
    "prefix": "backAudioManager-onPause",
    "body": ["backAudioManager.onPause(()=>{", "\t${1}", "});"],
    "description": "背景音频暂停事件"
  },
  "backAudioManager.onStop": {
    "prefix": "backAudioManager-onStop",
    "body": ["backAudioManager.onStop(()=>{", "\t${1}", "});"],
    "description": "背景音频停止事件"
  },
  "backAudioManager.onEnded": {
    "prefix": "backAudioManager-onEnded",
    "body": ["backAudioManager.onEnded(()=>{", "\t${1}", "});"],
    "description": "背景音频自然播放结束事件"
  },
  "backAudioManager.onTimeUpdate": {
    "prefix": "backAudioManager-onTimeUpdate",
    "body": ["backAudioManager.onTimeUpdate((${1})=>{", "\t${2}", "});"],
    "description": "背景音频播放进度更新事件"
  },
  "backAudioManager.onPrev": {
    "prefix": "backAudioManager-onPrev",
    "body": ["backAudioManager.onPrev((${1})=>{", "\t${2}", "});"],
    "description": "用户在系统音乐播放面板点击上一曲事件（iOS only）"
  },
  "backAudioManager.onNext": {
    "prefix": "backAudioManager-onNext",
    "body": ["backAudioManager.onNext((${1})=>{", "\t${2}", "});"],
    "description": "用户在系统音乐播放面板点击下一曲事件（iOS only）"
  },
  "backAudioManager.onError": {
    "prefix": "backAudioManager-onError",
    "body": ["backAudioManager.onError((${1:errMsg})=>{", "\t${2}", "});"],
    "description": "背景音频播放错误事件"
  },
  "backAudioManager.onWaiting": {
    "prefix": "backAudioManager-onWaiting",
    "body": ["backAudioManager.onWaiting((${1})=>{", "\t${2}", "});"],
    "description": "音频加载中事件，当音频因为数据不足，需要停下来加载时会触发"
  },
  "wx.createAudioContext": {
    "prefix": "wx-createAudioContext",
    "body": ["${1:let audioContext = }wx.createAudioContext(${2}, this);"],
    "description": "创建并返回audio上下文audioContext对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内<audio/>组件。1.6.0 起不再维护"
  },
  "audioContext.setSrc": {
    "prefix": "audioContext-setSrc",
    "body": ["audioContext.setSrc('${1}');"],
    "description": "设置音频的地址。1.6.0 起不再维护"
  },
  "audioContext.play": {
    "prefix": "audioContext-play",
    "body": ["audioContext.play();"],
    "description": "播放。1.6.0 起不再维护"
  },
  "audioContext.pause": {
    "prefix": "audioContext-pause",
    "body": ["audioContext.pause();"],
    "description": "暂停。1.6.0 起不再维护"
  },
  "audioContext.seek": {
    "prefix": "audioContext-seek",
    "body": ["audioContext.seek(${1});"],
    "description": "跳转到指定位置，单位 s。1.6.0 起不再维护"
  },
  "wx.createInnerAudioContext": {
    "prefix": "wx-createInnerAudioContext",
    "body": [
      "// properties(Read only)(duration,currentTime,paused,buffered,volume)",
      "// properties(src,startTime,autoplay,loop,obeyMuteSwitch)",
      "${1:let innerAudioContext = }wx.createInnerAudioContext();"
    ],
    "description": "创建并返回内部 audio 上下文 innerAudioContext 对象。本接口是 wx.createAudioContext 升级版。1.6.0 开始支持"
  },
  "innerAudioContext.play": {
    "prefix": "innerAudioContext-play",
    "body": ["innerAudioContext.play();"],
    "description": "播放"
  },
  "innerAudioContext.pause": {
    "prefix": "innerAudioContext-pause",
    "body": ["innerAudioContext.pause();"],
    "description": "暂停"
  },
  "innerAudioContext.stop": {
    "prefix": "innerAudioContext-stop",
    "body": ["innerAudioContext.stop();"],
    "description": "停止"
  },
  "innerAudioContext.seek": {
    "prefix": "innerAudioContext-seek",
    "body": ["innerAudioContext.seek(${1});"],
    "description": "跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度"
  },
  "innerAudioContext.destroy": {
    "prefix": "innerAudioContext-destroy",
    "body": ["innerAudioContext.destroy();"],
    "description": "销毁当前实例"
  },
  "innerAudioContext.onCanplay": {
    "prefix": "innerAudioContext-onCanplay",
    "body": ["innerAudioContext.onCanplay(()=>{${1}});"],
    "description": "音频进入可以播放状态，但不保证后面可以流畅播放"
  },
  "innerAudioContext.onPlay": {
    "prefix": "innerAudioContext-onPlay",
    "body": ["innerAudioContext.onPlay((${1})=>{", "\t${2}", "});"],
    "description": "音频播放事件"
  },
  "innerAudioContext.onPause": {
    "prefix": "innerAudioContext-onPause",
    "body": ["innerAudioContext.onPause((${1})=>{", "\t${2}", "});"],
    "description": "音频暂停播放事件"
  },
  "innerAudioContext.onStop": {
    "prefix": "innerAudioContext-onStop",
    "body": ["innerAudioContext.onStop((${1})=>{", "\t${2}", "});"],
    "description": "音频停止播放事件"
  },
  "innerAudioContext.onEnded": {
    "prefix": "innerAudioContext-onEnded",
    "body": ["innerAudioContext.onEnded((${1})=>{", "\t${2}", "});"],
    "description": "音频自然播放结束事件"
  },
  "innerAudioContext.onTimeUpdate": {
    "prefix": "innerAudioContext-onTimeUpdate",
    "body": ["innerAudioContext.onTimeUpdate((${1})=>{", "\t${2}", "});"],
    "description": "音频播放进度更新事件"
  },
  "innerAudioContext.onError": {
    "prefix": "innerAudioContext-onError",
    "body": ["innerAudioContext.onError((${1:errMsg})=>{", "\t${2}", "});"],
    "description": "音频播放错误事件"
  },
  "innerAudioContext.onWaiting": {
    "prefix": "innerAudioContext-onWaiting",
    "body": ["innerAudioContext.onWaiting((${1})=>{", "\t${2}", "});"],
    "description": "音频加载中事件，当音频因为数据不足，需要停下来加载时会触发"
  },
  "innerAudioContext.onSeeking": {
    "prefix": "innerAudioContext-onSeeking",
    "body": ["innerAudioContext.onSeeking((${1})=>{", "\t${2}", "});"],
    "description": "音频进行seek操作事件"
  },
  "innerAudioContext.onSeeked": {
    "prefix": "innerAudioContext-onSeeked",
    "body": ["innerAudioContext.onSeeked((${1})=>{", "\t${2}", "});"],
    "description": "音频完成seek操作事件"
  },

  "innerAudioContext.offCanplay": {
    "prefix": "innerAudioContext-offCanplay",
    "body": ["innerAudioContext.offCanplay((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onCanplay事件"
  },
  "innerAudioContext.offPlay": {
    "prefix": "innerAudioContext-offPlay",
    "body": ["innerAudioContext.offPlay((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onPlay事件"
  },
  "innerAudioContext.offStop": {
    "prefix": "innerAudioContext-offStop",
    "body": ["innerAudioContext.offStop((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onStop事件"
  },
  "innerAudioContext.offEnded": {
    "prefix": "innerAudioContext-offEnded",
    "body": ["innerAudioContext.offEnded((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onEnded事件"
  },
  "innerAudioContext.offTimeUpdate": {
    "prefix": "innerAudioContext-offTimeUpdate",
    "body": ["innerAudioContext.offTimeUpdate((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onTimeUpdate事件"
  },
  "innerAudioContext.offError": {
    "prefix": "innerAudioContext-offError",
    "body": ["innerAudioContext.offError((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onError事件"
  },
  "innerAudioContext.offWaiting": {
    "prefix": "innerAudioContext-offWaiting",
    "body": ["innerAudioContext.offWaiting((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onWaiting事件"
  },
  "innerAudioContext.offSeeking": {
    "prefix": "innerAudioContext-offSeeking",
    "body": ["innerAudioContext.offSeeking((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onSeeking事件"
  },
  "innerAudioContext.offSeeked": {
    "prefix": "innerAudioContext-offSeeked",
    "body": ["innerAudioContext.offSeeked((${1})=>{", "\t${2}", "});"],
    "description": "取消监听onSeeked事件"
  },
  "wx.getAvailableAudioSources": {
    "prefix": "wx-getAvailableAudioSources",
    "body": [
      "wx.getAvailableAudioSources({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取当前支持的音频输入源"
  },

  "wx.chooseVideo": {
    "prefix": "wx-chooseVideo",
    "body": [
      "wx.chooseVideo({",
      "\tsourceType:['album', 'camera'],",
      "\tcompressed: ${1:true},",
      "\tmaxDuration:${2:15},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "拍摄视频或从手机相册中选视频，返回视频的临时文件路径。"
  },
  "wx.saveVideoToPhotosAlbum": {
    "prefix": "wx-saveVideoToPhotosAlbum",
    "body": [
      "wx.saveVideoToPhotosAlbum({",
      "\tfilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "保存视频到系统相册。需要用户授权 scope.writePhotosAlbum"
  },

  "wx.createVideoContext": {
    "prefix": "wx-createVideoContext",
    "body": [
      "${1:let videoContext = }wx.createVideoContext('${2:video}'${3:, this});"
    ],
    "description": "创建并返回 video 上下文 videoContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <video/> 组件"
  },
  "videoContext.play": {
    "prefix": "videoContext-play",
    "body": ["videoContext.play();"],
    "description": "播放"
  },
  "videoContext.pause": {
    "prefix": "videoContext-pause",
    "body": ["videoContext.pause();"],
    "description": "暂停"
  },
  "videoContext.stop": {
    "prefix": "videoContext-stop",
    "body": ["videoContext.stop();"],
    "description": "停止"
  },
  "videoContext.seek": {
    "prefix": "videoContext-seek",
    "body": ["videoContext.seek(${1});"],
    "description": "跳转到指定位置，单位 s"
  },
  "videoContext.sendDanmu": {
    "prefix": "videoContext-sendDanmu",
    "body": [
      "videoContext.sendDanmu({",
      "\ttext: ${1},",
      "\tcolor: ${2}",
      "});"
    ],
    "description": "发送弹幕，包含两个属性 text, color。"
  },
  "videoContext.playbackRate": {
    "prefix": "videoContext-playbackRate",
    "body": ["videoContext.playbackRate(${1});"],
    "description": "设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5"
  },
  "videoContext.requestFullScreen": {
    "prefix": "videoContext-requestFullScreen",
    "body": ["videoContext.requestFullScreen({", "\tdirection: ${1:0}", "});"],
    "description": "进入全屏，可传入{direction}参数, 有效值为 0, 90,-90"
  },
  "videoContext.exitFullScreen": {
    "prefix": "videoContext-exitFullScreen",
    "body": ["videoContext.exitFullScreen();"],
    "description": "退出全屏"
  },
  "videoContext.showStatusBar": {
    "prefix": "videoContext-showStatusBar",
    "body": ["videoContext.showStatusBar();"],
    "description": "显示状态栏，仅在iOS全屏下有效"
  },
  "videoContext.hideStatusBar": {
    "prefix": "videoContext-hideStatusBar",
    "body": ["videoContext.hideStatusBar();"],
    "description": "隐藏状态栏，仅在iOS全屏下有效"
  },
  "wx.createCameraContext": {
    "prefix": "wx-createCameraContext",
    "body": ["${1:let cameraContext = }wx.createCameraContext(${2:this});"],
    "description": "创建并返回 camera 上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。1.6.0 开始支持"
  },
  "cameraContext.takePhoto": {
    "prefix": "cameraContext-takePhoto",
    "body": [
      "cameraContext.takePhoto({",
      "\tquality: ${1:normal},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "拍照，可指定质量(high, normal, low，默认normal)，成功则返回图片"
  },
  "cameraContext.startRecord": {
    "prefix": "cameraContext-startRecord",
    "body": [
      "cameraContext.startRecord({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "\ttimeoutCallback: (result)=>{",
      "\t\t${2}",
      "\t},",
      "});"
    ],
    "description": "开始录像"
  },
  "cameraContext.stopRecord": {
    "prefix": "cameraContext-stopRecord",
    "body": [
      "cameraContext.stopRecord({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "结束录像，成功则返回封面与视频"
  },

  "wx.createLivePlayerContext": {
    "prefix": "wx-createLivePlayerContext",
    "body": [
      "${1:let livePlayerContext = }wx.createLivePlayerContext('${2:live-player}'${3:, this})"
    ],
    "description": "操作对应的 <live-player/> 组件。 创建并返回 live-player 上下文 LivePlayerContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <live-player/> 组件。"
  },
  "livePlayerContext.play": {
    "prefix": "livePlayerContext-play",
    "body": [
      "livePlayerContext.play({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "播放"
  },
  "livePlayerContext.stop": {
    "prefix": "livePlayerContext-stop",
    "body": [
      "livePlayerContext.stop({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止"
  },
  "livePlayerContext.mute": {
    "prefix": "livePlayerContext-mute",
    "body": [
      "livePlayerContext.mute({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "静音"
  },
  "livePlayerContext.pause": {
    "prefix": "livePlayerContext-pause",
    "body": [
      "livePlayerContext.pause({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "暂停"
  },
  "livePlayerContext.resume": {
    "prefix": "livePlayerContext-resume",
    "body": [
      "livePlayerContext.resume({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "恢复"
  },
  "livePlayerContext.requestFullScreen": {
    "prefix": "livePlayerContext-requestFullScreen",
    "body": [
      "livePlayerContext.requestFullScreen({",
      "\tdirection: ${1:0},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "进入全屏"
  },
  "livePlayerContext.exitFullScreen": {
    "prefix": "livePlayerContext-exitFullScreen",
    "body": [
      "livePlayerContext.exitFullScreen({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "退出全屏"
  },
  "wx.createLivePusherContext": {
    "prefix": "wx-createLivePusherContext",
    "body": [
      "${1:let livePusherContext = }wx.createLivePusherContext('${2:live-pusher}'${3:, this})"
    ],
    "description": "创建并返回 live-pusher 上下文 LivePusherContext 对象，LivePusherContext 与页面的 <live-pusher /> 组件绑定，一个页面只能有一个 live-pusher，通过它可以操作对应的 <live-pusher/> 组件。 在自定义组件下，第一个参数传入组件实例this，以操作组件内 <live-pusher/> 组件。"
  },
  "livePusherContext.play": {
    "prefix": "livePusherContext-play",
    "body": [
      "livePusherContext.play({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "播放推流"
  },
  "livePusherContext.stop": {
    "prefix": "livePusherContext-stop",
    "body": [
      "livePusherContext.stop({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止推流"
  },
  "livePusherContext.pause": {
    "prefix": "livePusherContext-pause",
    "body": [
      "livePusherContext.pause({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "暂停推流"
  },
  "livePusherContext.resume": {
    "prefix": "livePusherContext-resume",
    "body": [
      "livePusherContext.resume({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "恢复推流"
  },
  "livePusherContext.switchCamera": {
    "prefix": "livePusherContext-switchCamera",
    "body": [
      "livePusherContext.switchCamera({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "切换前后摄像头"
  },
  "livePusherContext.snapshot": {
    "prefix": "livePusherContext-snapshot",
    "body": [
      "livePusherContext.snapshot({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "快照"
  },
  "livePusherContext.toggleTorch": {
    "prefix": "livePusherContext-toggleTorch",
    "body": [
      "livePusherContext.toggleTorch({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "切换闪光灯"
  },
  "wx.loadFontFace": {
    "prefix": "wx-loadFontFace",
    "body": [
      "wx.loadFontFace({",
      "\tfamily: '${1}',",
      "\tsource: '${2}',",
      "\tdesc: {",
      "\t\tstyle: '${3:normal}',",
      "\t\tweight: '${4:normal}',",
      "\t\tletiant: '${5:normal}'",
      "\t},",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "动态加载网络字体"
  },
  "wx.saveFile": {
    "prefix": "wx-saveFile",
    "body": [
      "wx.saveFile({",
      "\ttempFilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "保存文件到本地。注意：saveFile会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用"
  },
  "wx.getSavedFileList": {
    "prefix": "wx-getSavedFileList",
    "body": [
      "wx.getSavedFileList({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取本地已保存的文件列表"
  },
  "wx.getSavedFileInfo": {
    "prefix": "wx-getSavedFileInfo",
    "body": [
      "wx.getSavedFileInfo({",
      "\tfilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 wx.getFileInfo 接口"
  },
  "wx.removeSavedFile": {
    "prefix": "wx-removeSavedFile",
    "body": [
      "wx.removeSavedFile({",
      "\tfilePath: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "删除本地存储的文件"
  },
  "wx.openDocument": {
    "prefix": "wx-openDocument",
    "body": [
      "wx.openDocument({",
      "\tfilePath: ${1},",
      "\tfileType: ${2:'docx'},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx"
  },
  "wx.setStorage": {
    "prefix": "wx-setStorage",
    "body": [
      "wx.setStorage({",
      "\tkey: '${1:key}',",
      "\tdata: ${2:data},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。"
  },
  "wx.setStorageSync": {
    "prefix": "wx-setStorageSync",
    "body": ["wx.setStorageSync(${1:key}, ${2:data});"],
    "description": "将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。"
  },
  "wx.getStorage": {
    "prefix": "wx-getStorage",
    "body": [
      "wx.getStorage({",
      "\tkey: '${1:key}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "从本地缓存中异步获取指定 key 对应的内容。"
  },
  "wx.getStorageSync": {
    "prefix": "wx-getStorageSync",
    "body": ["wx.getStorageSync(${1:key});"],
    "description": "从本地缓存中同步获取指定 key 对应的内容。"
  },
  "wx.getStorageInfo": {
    "prefix": "wx-getStorageInfo",
    "body": [
      "wx.getStorageInfo({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "异步获取当前storage的相关信息"
  },
  "wx.getStorageInfoSync": {
    "prefix": "wx-getStorageInfoSync",
    "body": ["${1:let storageInfo = }wx.getStorageInfoSync();"],
    "description": "同步获取当前storage的相关信息"
  },
  "wx.removeStorage": {
    "prefix": "wx-removeStorage",
    "body": [
      "wx.removeStorage({",
      "\tkey: '${1:key},'",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "从本地缓存中异步移除指定 key。"
  },
  "wx.removeStorageSync": {
    "prefix": "wx-removeStorageSync",
    "body": ["wx.removeStorageSync(${1:key});"],
    "description": "从本地缓存中同步移除指定 key。"
  },
  "wx.clearStorage": {
    "prefix": "wx-clearStorage",
    "body": ["wx.clearStorage();"],
    "description": "异步清除本地数据缓存"
  },
  "wx.clearStorageSync": {
    "prefix": "wx-clearStorageSync",
    "body": ["wx.clearStorageSync();"],
    "description": "同步清除本地数据缓存"
  },
  "wx.getLocation": {
    "prefix": "wx-getLocation",
    "body": [
      "wx.getLocation({",
      "\ttype: '${1:wgs84}',",
      "\taltitude: ${2:false},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取当前的地理位置、速度。"
  },
  "wx.chooseLocation": {
    "prefix": "wx-chooseLocation",
    "body": [
      "wx.chooseLocation({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "打开地图选择位置。需要用户授权 scope.userLocation"
  },
  "wx.openLocation": {
    "prefix": "wx-openLocation",
    "body": [
      "wx.openLocation({",
      "\tlatitude: ${1:0},",
      "\tlongitude: ${2:0},",
      "\tscale: ${3:18},",
      "\tname: '${4}',",
      "\taddress: '${5}',",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "​使用微信内置地图查看位置。 需要用户授权 scope.userLocation"
  },
  "wx.createMapContext": {
    "prefix": "wx-createMapContext",
    "body": [
      "${1:let mapContext = }wx.createMapContext('${2:map}'${3:, this});"
    ],
    "description": "创建并返回 map 上下文 mapContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <map/> 组件"
  },
  "mapContext.getCenterLocation": {
    "prefix": "mapContext-getCenterLocation",
    "body": [
      "mapContext.getCenterLocation({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 wx.openLocation"
  },
  "mapContext.moveToLocation": {
    "prefix": "mapContext-moveToLocation",
    "body": ["mapContext.moveToLocation();"],
    "description": "将地图中心移动到当前定位点，需要配合map组件的show-location使用"
  },
  "mapContext.translateMarker": {
    "prefix": "mapContext-translateMarker",
    "body": [
      "mapContext.translateMarker({",
      "\tmarkerId: ${1},",
      "\tdestination: {",
      "\t\tlatitude: ${2},",
      "\t\tlongitude: ${3}",
      "\t},",
      "\tautoRotate: ${4:false},",
      "\trotate: ${5},",
      "\tduration: ${6:1000},",
      "\tanimationEnd: ()=>{},",
      "\tfail: ()=>{}",
      "});"
    ],
    "description": "平移marker，带动画"
  },
  "mapContext.includePoints": {
    "prefix": "mapContext-includePoints",
    "body": [
      "mapContext.includePoints({",
      "\tpoints: [",
      "\t\t{",
      "\t\t\tlatitude: ${1:latitude},",
      "\t\t\tlongitude: ${2:longitude}",
      "\t\t}",
      "\t],",
      "\tpadding:[$3]",
      "});"
    ],
    "description": "缩放视野展示所有经纬度"
  },
  "mapContext.getRegion": {
    "prefix": "mapContext-getRegion",
    "body": [
      "mapContext.getRegion({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取当前地图的视野范围"
  },
  "mapContext.getScale": {
    "prefix": "mapContext-getScale",
    "body": [
      "mapContext.getScale({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取当前地图的缩放级别"
  },
  "wx.getSystemInfo": {
    "prefix": "wx-getSystemInfo",
    "body": [
      "wx.getSystemInfo({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "异步获取系统信息。"
  },
  "wx.getSystemInfoSync": {
    "prefix": "wx-getSystemInfoSync",
    "body": ["${let systemInfo = }wx.getSystemInfoSync();"],
    "description": "获取系统信息同步接口"
  },
  "wx.canIUse": {
    "prefix": "wx-canIUse",
    "body": ["wx.canIUse(${1});"],
    "description": "判断小程序的API，回调，参数，组件等是否在当前版本可用。"
  },
  "wx.onMemoryWarning": {
    "prefix": "wx-onMemoryWarning",
    "body": ["wx.onMemoryWarning((result) => {", "\t${1}", "});"],
    "description": "监听内存不足的告警事件，Android下有告警等级划分，只有LOW和CRITICAL会回调开发者；iOS无等级划分"
  },
  "wx.getNetworkType": {
    "prefix": "wx-getNetworkType",
    "body": [
      "wx.getNetworkType({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取网络类型"
  },
  "wx.onNetworkStatusChange": {
    "prefix": "wx-onNetworkStatusChange",
    "body": ["wx.onNetworkStatusChange((result) => {", "\t${1}", "});"],
    "description": "监听网络状态变化。"
  },
  "wx.onAccelerometerChange": {
    "prefix": "wx-onAccelerometerChange",
    "body": ["wx.onAccelerometerChange((result) => {", "\t${1}", "});"],
    "description": "监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 wx.stopAccelerometer 停止监听。"
  },
  "wx.startAccelerometer": {
    "prefix": "wx-startAccelerometer",
    "body": [
      "wx.startAccelerometer({",
      "\tinterval: '${1:normal}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始监听加速度数据。"
  },
  "wx.stopAccelerometer": {
    "prefix": "wx-stopAccelerometer",
    "body": [
      "wx.stopAccelerometer({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止监听加速度数据。"
  },
  "wx.onCompassChange": {
    "prefix": "wx-onCompassChange",
    "body": ["wx.onCompassChange((result) => {", "\t${1}", "});"],
    "description": "监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用wx.stopCompass停止监听。"
  },
  "wx.startCompass": {
    "prefix": "wx-startCompass",
    "body": [
      "wx.startCompass({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始监听罗盘数据。"
  },
  "wx.stopCompass": {
    "prefix": "wx-stopCompass",
    "body": [
      "wx.stopCompass({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止监听罗盘数据。"
  },
  "wx.makePhoneCall": {
    "prefix": "wx-makePhoneCall",
    "body": [
      "wx.makePhoneCall({",
      "\tphoneNumber: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "拨打电话"
  },
  "wx.scanCode": {
    "prefix": "wx-scanCode",
    "body": [
      "wx.scanCode({",
      "\tonlyFromCamera: ${1:false},",
      "\tscanType: ['${2:qrCode}','${3:barCode}','${4:datamatrix}','${5:pdf417}'],",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "调起客户端扫码界面，扫码成功后返回对应的结果"
  },
  "wx.setClipboardData": {
    "prefix": "wx-setClipboardData",
    "body": [
      "wx.setClipboardData({",
      "\tdata: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "设置系统剪贴板的内容"
  },
  "wx.getClipboardData": {
    "prefix": "wx-getClipboardData",
    "body": [
      "wx.getClipboardData({",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取系统剪贴板内容"
  },
  "wx.openBluetoothAdapter": {
    "prefix": "wx-openBluetoothAdapter",
    "body": [
      "wx.openBluetoothAdapter({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t,",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "初始化小程序蓝牙模块，生效周期为调用wx.openBluetoothAdapter至调用wx.closeBluetoothAdapter或小程序被销毁为止。"
  },
  "wx.closeBluetoothAdapter": {
    "prefix": "wx-closeBluetoothAdapter",
    "body": [
      "wx.closeBluetoothAdapter({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源。"
  },
  "wx.getBluetoothAdapterState": {
    "prefix": "wx-getBluetoothAdapterState",
    "body": [
      "wx.getBluetoothAdapterState({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取本机蓝牙适配器状态"
  },
  "wx.onBluetoothAdapterStateChange": {
    "prefix": "wx-onBluetoothAdapterStateChange",
    "body": ["wx.onBluetoothAdapterStateChange((result) => {", "\t${1}", "});"],
    "description": "监听蓝牙适配器状态变化事件"
  },
  "wx.startBluetoothDevicesDiscovery": {
    "prefix": "wx-startBluetoothDevicesDiscovery",
    "body": [
      "wx.startBluetoothDevicesDiscovery({",
      "\tservices:[${1}]",
      "\tallowDuplicatesKey:${2:false}",
      "\tinterval:${3:0}",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。"
  },
  "wx.stopBluetoothDevicesDiscovery": {
    "prefix": "wx-stopBluetoothDevicesDiscovery",
    "body": [
      "wx.stopBluetoothDevicesDiscovery({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。"
  },
  "wx.getBluetoothDevices": {
    "prefix": "wx-getBluetoothDevices",
    "body": [
      "wx.getBluetoothDevices({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。"
  },
  "wx.onBluetoothDeviceFound": {
    "prefix": "wx-onBluetoothDeviceFound",
    "body": ["wx.onBluetoothDeviceFound((result) => {", "\t${1}", "});"],
    "description": "监听寻找到新设备的事件"
  },
  "wx.getConnectedBluetoothDevices": {
    "prefix": "wx-getConnectedBluetoothDevices",
    "body": [
      "wx.getConnectedBluetoothDevices({",
      "\tservices: [${1}],",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "根据 uuid 获取处于已连接状态的设备"
  },
  "wx.createBLEConnection": {
    "prefix": "wx-createBLEConnection",
    "body": [
      "wx.createBLEConnection({",
      "\tdeviceId: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "连接低功耗蓝牙设备。"
  },
  "wx.closeBLEConnection": {
    "prefix": "wx-closeBLEConnection",
    "body": [
      "wx.closeBLEConnection({",
      "\tdeviceId: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "断开与低功耗蓝牙设备的连接"
  },
  "wx.onBLEConnectionStateChange": {
    "prefix": "wx-onBLEConnectionStateChange",
    "body": ["wx.onBLEConnectionStateChange((result) => {", "\t${1}", "});"],
    "description": "监听低功耗蓝牙连接状态的改变事件，包括开发者主动连接或断开连接，设备丢失，连接异常断开等等"
  },
  "wx.getBLEDeviceServices": {
    "prefix": "wx-getBLEDeviceServices",
    "body": [
      "wx.getBLEDeviceServices({",
      "\tdeviceId: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取蓝牙设备所有 service（服务）"
  },
  "wx.getBLEDeviceCharacteristics": {
    "prefix": "wx-getBLEDeviceCharacteristics",
    "body": [
      "wx.getBLEDeviceCharacteristics({",
      "\tdeviceId: ${1},",
      "\tservices: ${2},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取蓝牙设备某个服务中的所有 characteristic（特征值）"
  },
  "wx.readBLECharacteristicValue": {
    "prefix": "wx-readBLECharacteristicValue",
    "body": [
      "wx.readBLECharacteristicValue({",
      "\tdeviceId: ${1},",
      "\tservices: ${2},",
      "\tcharacteristicId: ${3},",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性"
  },
  "wx.writeBLECharacteristicValue": {
    "prefix": "wx-writeBLECharacteristicValue",
    "body": [
      "wx.writeBLECharacteristicValue({",
      "\tdeviceId: ${1},",
      "\tservices: ${2},",
      "\tcharacteristicId: ${3},",
      "\tvalue: ${4:<ArrayBuffer类型>},",
      "\tsuccess: (result)=>{",
      "\t\t${5}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持write才可以成功调用，具体参照 characteristic 的 properties 属性"
  },
  "wx.notifyBLECharacteristicValueChange": {
    "prefix": "wx-notifyBLECharacteristicValueChange",
    "body": [
      "wx.notifyBLECharacteristicValueChange({",
      "\tdeviceId: ${1},",
      "\tservices: ${2},",
      "\tcharacteristicId: ${3},",
      "\tstate: ${4:true},",
      "\tvalue: ${5:<ArrayBuffer类型>},",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持notify或者indicate才可以成功调用，具体参照 characteristic 的 properties 属性"
  },
  "wx.onBLECharacteristicValueChange": {
    "prefix": "wx-onBLECharacteristicValueChange",
    "body": [
      "wx.onBLECharacteristicValueChange((result) => {",
      "\t${1}",
      "});"
    ],
    "description": "监听低功耗蓝牙设备的特征值变化。必须先启用notify接口才能接收到设备推送的notification。"
  },
  "wx.startBeaconDiscovery": {
    "prefix": "wx-startBeaconDiscovery",
    "body": [
      "wx.startBeaconDiscovery({",
      "\tuuids: [${1}],",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始搜索附近的iBeacon设备"
  },
  "wx.stopBeaconDiscovery": {
    "prefix": "wx-stopBeaconDiscovery",
    "body": [
      "wx.stopBeaconDiscovery({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "停止搜索附近的iBeacon设备"
  },
  "wx.getBeacons": {
    "prefix": "wx-getBeacons",
    "body": [
      "wx.getBeacons({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取所有已搜索到的iBeacon设备"
  },
  "wx.onBeaconUpdate": {
    "prefix": "wx-onBeaconUpdate",
    "body": ["wx.onBeaconUpdate((result) => {", "\t${1}", "});"],
    "description": "监听 iBeacon 设备的更新事件"
  },
  "wx.onBeaconServiceChange": {
    "prefix": "wx-onBeaconServiceChange",
    "body": ["wx.onBeaconServiceChange((result) => {", "\t${1}", "});"],
    "description": "监听 iBeacon 服务的状态变化"
  },
  "wx.setScreenBrightness": {
    "prefix": "wx-setScreenBrightness",
    "body": [
      "wx.setScreenBrightness({",
      "\tvalue: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "设置屏幕亮度"
  },
  "wx.getScreenBrightness": {
    "prefix": "wx-getScreenBrightness",
    "body": [
      "wx.getScreenBrightness({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取屏幕亮度。"
  },
  "wx.vibrateLong": {
    "prefix": "wx-vibrateLong",
    "body": [
      "wx.vibrateLong({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "使手机发生较长时间的振动（400ms）"
  },
  "wx.vibrateShort": {
    "prefix": "wx-vibrateShort",
    "body": [
      "wx.vibrateShort({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "使手机发生较短时间的振动（15ms）"
  },
  "wx.setKeepScreenOn": {
    "prefix": "wx-setKeepScreenOn",
    "body": [
      "wx.setKeepScreenOn({",
      "\tkeepScreenOn: ${1:true},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。"
  },
  "wx.onUserCaptureScreen": {
    "prefix": "wx-onUserCaptureScreen",
    "body": ["wx.onUserCaptureScreen((result)=>{", "\t${1}", "});"],
    "description": "监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件"
  },
  "wx.addPhoneContact": {
    "prefix": "wx-addPhoneContact",
    "body": [
      "wx.addPhoneContact({",
      "\tphotoFilePath: ${1},",
      "\tnickName: ${2},",
      "\tlastName: ${3},",
      "\tmiddleName: ${4},",
      "\tfirstName: ${5},",
      "\tmobilePhoneNumber: ${6},",
      "\tweChatNumber: ${7},",
      "\temail: ${8},",
      "\tsuccess: (result)=>{",
      "\t\t${9}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式，写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。此API参数非常多，请参考文档。"
  },
  "wx.getHCEState": {
    "prefix": "wx-getHCEState",
    "body": [
      "wx.getHCEState({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "判断当前设备是否支持 HCE 能力"
  },
  "wx.startHCE": {
    "prefix": "wx-startHCE",
    "body": [
      "wx.startHCE({",
      "\taid_list: [${1}],",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "初始化NFC模块"
  },
  "wx.stopHCE": {
    "prefix": "wx-stopHCE",
    "body": [
      "wx.stopHCE({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭 NFC 模块。仅在安卓系统下有效。"
  },
  "wx.onHCEMessage": {
    "prefix": "wx-onHCEMessage",
    "body": ["wx.onHCEMessage((result) => {", "\t${1}", "});"],
    "description": "监听 NFC 设备的消息回调，并在回调中处理。"
  },
  "wx.sendHCEMessage": {
    "prefix": "wx-sendHCEMessage",
    "body": [
      "wx.sendHCEMessage({",
      "\tdata: ${1:<ArrayBuffer类型>},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "发送 NFC 消息。仅在安卓系统下有效。"
  },
  "wx.startWifi": {
    "prefix": "wx-startWifi",
    "body": [
      "wx.startWifi({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "初始化Wi-Fi模块。"
  },
  "wx.stopWifi": {
    "prefix": "wx-stopWifi",
    "body": [
      "wx.stopWifi({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭Wi-Fi模块。"
  },
  "wx.connectWifi": {
    "prefix": "wx-connectWifi",
    "body": [
      "wx.connectWifi({",
      "\tSSID: ${1},",
      "\tBSSID: ${2},",
      "\tpassword: ${3},",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "连接Wi-Fi。若已知Wi-Fi信息，可以直接利用该接口连接。"
  },
  "wx.getWifiList": {
    "prefix": "wx-getWifiList",
    "body": [
      "wx.getWifiList({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "请求获取Wi-Fi列表，在onGetWifiList注册的回调中返回wifiList数据。"
  },
  "wx.onGetWifiList": {
    "prefix": "wx-onGetWifiList",
    "body": ["wx.onGetWifiList((result) => {", "\t${1}", "});"],
    "description": "监听在获取到Wi-Fi列表数据时的事件，在回调中将返回wifiList。"
  },
  "wx.setWifiList": {
    "prefix": "wx-setWifiList",
    "body": [
      "wx.setWifiList({",
      "\twifiList: [",
      "\t\t{",
      "\t\t\tSSID: ${1},",
      "\t\t\tBSSID: ${2},",
      "\t\t\tpassword: ${3}",
      "\t\t}",
      "\t],",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "iOS特有接口，在 onGetWifiList 回调后，利用接口设置 wifiList 中 AP 的相关信息。"
  },
  "wx.onWifiConnected": {
    "prefix": "wx-onWifiConnected",
    "body": ["wx.onWifiConnected((result) => {", "\t${1}", "});"],
    "description": "监听连接上Wi-Fi的事件。"
  },
  "wx.getConnectedWifi": {
    "prefix": "wx-getConnectedWifi",
    "body": [
      "wx.getConnectedWifi({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取已连接中的Wi-Fi信息"
  },
  "wx.showToast": {
    "prefix": "wx-showToast",
    "body": [
      "wx.showToast({",
      "\ttitle: '${1}',",
      "\ticon: '${2:none}',",
      "\timage: '${3}',",
      "\tduration: ${4:1500},",
      "\tmask: ${5:false},",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示消息提示框"
  },
  "wx.showLoading": {
    "prefix": "wx-showLoading",
    "body": [
      "wx.showLoading({",
      "\ttitle: ${1},",
      "\tmask: ${2:true},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示loading提示框, 需主动调用wx.hideLoading才能关闭提示框"
  },
  "wx.hideToast": {
    "prefix": "wx-hideToast",
    "body": ["wx.hideToast();"],
    "description": "隐藏消息提示框"
  },
  "wx.hideLoading": {
    "prefix": "wx-hideLoading",
    "body": ["wx.hideLoading();"],
    "description": "隐藏loading提示框"
  },
  "wx.showModal": {
    "prefix": "wx-showModal",
    "body": [
      "wx.showModal({",
      "\ttitle: '${1}',",
      "\tcontent: '${2}',",
      "\tshowCancel: ${3:true},",
      "\tcancelText: '${4:取消}',",
      "\tcancelColor: '${5:#000000}',",
      "\tconfirmText: '${6:确定}',",
      "\tconfirmColor: '${7:#3CC51F}',",
      "\tsuccess: (result) => {",
      "\t\t${8:if(result.confirm){",
      "\t\t\t${9}",
      "\t\t}}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示模态弹窗"
  },
  "wx.showActionSheet": {
    "prefix": "wx-showActionSheet",
    "body": [
      "wx.showActionSheet({",
      "\titemList: [${1}],",
      "\titemColor: '${2:#000000}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示操作菜单"
  },
  "wx.onWindowResize": {
    "prefix": "wx-onWindowResize",
    "body": ["wx.onWindowResize((result)=>{", "\t\t${1}", "\t});"],
    "description": "监听窗口尺寸变化事件"
  },
  "wx.offWindowResize": {
    "prefix": "wx-offWindowResize",
    "body": ["wx.offWindowResize((result)=>{", "\t\t${1}", "\t});"],
    "description": "取消监听窗口尺寸变化事件"
  },
  "wx.setTopBarText": {
    "prefix": "wx-setTopBarText",
    "body": [
      "wx.setTopBarText({",
      "\ttext: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "动态设置置顶栏文字内容，只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容。"
  },
  "wx.setNavigationBarTitle": {
    "prefix": "wx-setNavigationBarTitle",
    "body": [
      "wx.setNavigationBarTitle({",
      "\ttitle: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "动态设置当前页面的标题。"
  },
  "wx.showNavigationBarLoading": {
    "prefix": "wx-showNavigationBarLoading",
    "body": ["wx.showNavigationBarLoading();"],
    "description": "在当前页面显示导航条加载动画。"
  },
  "wx.hideNavigationBarLoading": {
    "prefix": "wx-hideNavigationBarLoading",
    "body": ["wx.hideNavigationBarLoading();"],
    "description": "隐藏导航条加载动画。"
  },
  "wx.setNavigationBarColor": {
    "prefix": "wx-setNavigationBarColor",
    "body": [
      "wx.setNavigationBarColor({",
      "\tfrontColor: '${1:#ffffff}',",
      "\tbackgroundColor: '${2:#000000}',",
      "\tanimation: {",
      "\t\tduration: ${3:0},",
      "\t\ttimingFunc: '${4:linear}'",
      "\t},",
      "\tsuccess: (result)=>{",
      "\t\t${5}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "设置导航栏颜色"
  },
  "wx.setTabBarBadge": {
    "prefix": "wx-setTabBarBadge",
    "body": [
      "wx.setTabBarBadge({",
      "\tindex: ${1},",
      "\ttext: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "为tabBar某一项的右上角添加文本"
  },
  "wx.removeTabBarBadge": {
    "prefix": "wx-removeTabBarBadge",
    "body": [
      "wx.removeTabBarBadge({",
      "\tindex: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "移除tabBar某一项右上角的文本"
  },
  "wx.showTabBarRedDot": {
    "prefix": "wx-showTabBarRedDot",
    "body": [
      "wx.showTabBarRedDot({",
      "\tindex: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示tabBar某一项的右上角的红点"
  },
  "wx.hideTabBarRedDot": {
    "prefix": "wx-hideTabBarRedDot",
    "body": [
      "wx.hideTabBarRedDot({",
      "\tindex: ${1},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "隐藏tabBar某一项的右上角的红点"
  },
  "wx.setTabBarStyle": {
    "prefix": "wx-setTabBarStyle",
    "body": [
      "wx.setTabBarStyle({",
      "\tcolor: '${1:#000000}',",
      "\tselectedColor: '${2:#1AAD16}',",
      "\tbackgroundColor: '${3:#e3e3e3}',",
      "\tborderStyle: '${4:black}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "动态设置tabBar的整体样式"
  },
  "wx.setTabBarItem": {
    "prefix": "wx-setTabBarItem",
    "body": [
      "wx.setTabBarItem({",
      "\tindex: ${1},",
      "\ttext: ${2},",
      "\ticonPath: ${3},",
      "\tselectedIconPath: ${4},",
      "\tsuccess: (result)=>{",
      "\t\t${5}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "动态设置tabBar某一项的内容"
  },
  "wx.showTabBar": {
    "prefix": "wx-showTabBar",
    "body": [
      "wx.showTabBar({",
      "\tanimation: ${1:false},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示 tabBar"
  },
  "wx.hideTabBar": {
    "prefix": "wx-hideTabBar",
    "body": [
      "wx.hideTabBar({",
      "\tanimation: ${1:false},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "隐藏 tabBar"
  },
  "wx.setBackgroundColor": {
    "prefix": "wx-setBackgroundColor",
    "body": [
      "wx.setBackgroundColor({",
      "\tbackgroundColor: '${1}',",
      "\tbackgroundColorTop: '${2}',",
      "\tbackgroundColorBottom: '${3}'",
      "});"
    ],
    "description": "动态设置窗口的背景色"
  },
  "wx.setBackgroundTextStyle": {
    "prefix": "wx-setBackgroundTextStyle",
    "body": ["wx.setBackgroundTextStyle({", "\ttextStyle: '${1:dark}'", "});"],
    "description": "动态设置下拉背景字体、loading图的样式"
  },
  "wx.navigateTo": {
    "prefix": "wx-navigateTo",
    "body": [
      "wx.navigateTo({",
      "\turl: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。目前页面路径最多只能十层。"
  },
  "wx.redirectTo": {
    "prefix": "wx-redirectTo",
    "body": [
      "wx.redirectTo({",
      "\turl: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭当前页面，跳转到应用内的某个页面。"
  },
  "wx.reLaunch": {
    "prefix": "wx-reLaunch",
    "body": [
      "wx.reLaunch({",
      "\turl: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "关闭所有页面，打开到应用内的某个页面。"
  },
  "wx.switchTab": {
    "prefix": "wx-switchTab",
    "body": [
      "wx.switchTab({",
      "\turl: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "跳转到tabBar页面，并关闭其他所有非tabBar页面"
  },
  "wx.navigateBack": {
    "prefix": "wx-navigateBack",
    "body": ["wx.navigateBack({", "\tdelta: ${1:1}", "});"],
    "description": "关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages()) 获取当前的页面栈，决定需要返回几层。"
  },
  "wx.createAnimation": {
    "prefix": "wx-createAnimation",
    "body": [
      "${1:let animation = }wx.createAnimation({",
      "\tduration: ${2:400},",
      "\ttimingFunction: '${3:linear}',",
      "\tdelay: ${4:0},",
      "\ttransformOrigin: '${5:50% 50% 0}'",
      "});"
    ],
    "description": "创建一个动画实例animation。调用实例的方法来描述动画。"
  },

  "animation.opacity": {
    "prefix": "animation-opacity",
    "body": ["animation.opacity(${1});"],
    "description": "透明度，参数范围 0~1"
  },
  "animation.backgroundColor": {
    "prefix": "animation-backgroundColor",
    "body": ["animation.backgroundColor(${1});"],
    "description": "颜色值"
  },
  "animation.width": {
    "prefix": "animation-width",
    "body": ["animation.width(${1});"],
    "description": "宽度"
  },
  "animation.height": {
    "prefix": "animation-height",
    "body": ["animation.height(${1});"],
    "description": "长度"
  },
  "animation.top": {
    "prefix": "animation-top",
    "body": ["animation.top(${1});"],
    "description": "顶部距离"
  },
  "animation.left": {
    "prefix": "animation-left",
    "body": ["animation.height(${1});"],
    "description": "左侧距离"
  },
  "animation.bottom": {
    "prefix": "animation-bottom",
    "body": ["animation.bottom(${1});"],
    "description": "底部距离"
  },
  "animation.right": {
    "prefix": "animation-right",
    "body": ["animation.right(${1});"],
    "description": "右侧距离"
  },
  "animation.rotate": {
    "prefix": "animation-rotate",
    "body": ["animation.rotate(${1});"],
    "description": "绕原点旋转"
  },
  "animation.rotateX": {
    "prefix": "animation-rotateX",
    "body": ["animation.rotateX(${1});"],
    "description": "绕x轴旋转"
  },
  "animation.rotateY": {
    "prefix": "animation-rotateY",
    "body": ["animation.rotateY(${1});"],
    "description": "绕y轴旋转"
  },
  "animation.rotateZ": {
    "prefix": "animation-rotateZ",
    "body": ["animation.rotateZ(${1});"],
    "description": "绕z轴旋转"
  },
  "animation.rotate3d": {
    "prefix": "animation-rotate3d",
    "body": ["animation.rotate3d(${1},${2},${3},${4});"],
    "description": "3d旋转"
  },
  "animation.scale": {
    "prefix": "animation-scale",
    "body": ["animation.scale(${1}${2:,});"],
    "description": "x轴[y轴]缩放。一个参数时，表示在X轴、Y轴两个相同；两个参数时表示在X轴，在Y轴不同"
  },
  "animation.scaleX": {
    "prefix": "animation-scaleX",
    "body": ["animation.scaleX(${1});"],
    "description": "x轴缩放"
  },
  "animation.scaleY": {
    "prefix": "animation-scaleY",
    "body": ["animation.scaleY(${1});"],
    "description": "y轴缩放"
  },
  "animation.scaleZ": {
    "prefix": "animation-scaleZ",
    "body": ["animation.scaleZ(${1});"],
    "description": "z轴缩放"
  },
  "animation.scale3d": {
    "prefix": "animation-scale3d",
    "body": ["animation.scale3d(${1},${2},${3});"],
    "description": "3d缩放"
  },
  "animation.translate": {
    "prefix": "animation-translate",
    "body": ["animation.translate(${1}${2:,});"],
    "description": "x轴[y轴]偏移。一个参数时，表示在X轴；两个参数时表示在X轴，在Y轴"
  },
  "animation.translateX": {
    "prefix": "animation-translateX",
    "body": ["animation.translateX(${1});"],
    "description": "x轴偏移"
  },
  "animation.translateY": {
    "prefix": "animation-translateY",
    "body": ["animation.translateY(${1});"],
    "description": "y轴偏移"
  },
  "animation.translateZ": {
    "prefix": "animation-translateZ",
    "body": ["animation.translateZ(${1});"],
    "description": "z轴偏移"
  },
  "animation.translate3d": {
    "prefix": "animation-translate3d",
    "body": ["animation.translate3d(${1},${2},${3});"],
    "description": "3d偏移"
  },
  "animation.skew": {
    "prefix": "animation-skew",
    "body": ["animation.skew(${1}${2:,});"],
    "description": "x轴[y轴]倾斜。一个参数时，表示在X轴；两个参数时表示在X轴，在Y轴"
  },
  "animation.skewX": {
    "prefix": "animation-skewX",
    "body": ["animation.skewX(${1});"],
    "description": "x轴倾斜"
  },
  "animation.skewY": {
    "prefix": "animation-skewY",
    "body": ["animation.skewY(${1});"],
    "description": "y轴倾斜"
  },
  "animation.matrix": {
    "prefix": "animation-matrix",
    "body": ["animation.matrix(${1},${2},${3},${4},${5},${6});"],
    "description": "平面矩阵变换"
  },
  "animation.matrix3d": {
    "prefix": "animation-matrix3d",
    "body": [
      "animation.matrix3d(${1},${2},${3},${4},${5},${6},${7},${8},${9},${10},${11},${12},${13},${14},${15},${16});"
    ],
    "description": "立体矩阵变换"
  },
  "wx.pageScrollTo": {
    "prefix": "wx-pageScrollTo",
    "body": [
      "wx.pageScrollTo({",
      "\tscrollTop: ${1:0},",
      "\tduration: ${2:300}",
      "});"
    ],
    "description": "将页面滚动到目标位置。"
  },
  "wx.startPullDownRefresh": {
    "prefix": "wx-startPullDownRefresh",
    "body": [
      "wx.startPullDownRefresh({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致"
  },
  "wx.stopPullDownRefresh": {
    "prefix": "wx-stopPullDownRefresh",
    "body": ["wx.stopPullDownRefresh"],
    "description": "停止当前页面下拉刷新。"
  },
  "wx.getExtConfig": {
    "prefix": "wx-getExtConfig",
    "body": [
      "wx.getExtConfig({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取第三方平台自定义的数据字段"
  },
  "wx.getExtConfigSync": {
    "prefix": "wx-getExtConfigSync",
    "body": ["${1:let extConfig = }wx.getExtConfigSync();"],
    "description": "同步获取第三方平台自定义的数据字段"
  },
  "wx.login": {
    "prefix": "wx-login",
    "body": [
      "wx.login({",
      "\ttimeout:${1:10000},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "调用接口wx.login() 获取临时登录凭证（code）"
  },
  "wx.checkSession": {
    "prefix": "wx-checkSession",
    "body": [
      "wx.checkSession({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "校验用户当前session_key是否有效。"
  },
  "wx.authorize": {
    "prefix": "wx-authorize",
    "body": [
      "wx.authorize({",
      "\tscope: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。"
  },
  "wx.getUserInfo": {
    "prefix": "wx-getUserInfo",
    "body": [
      "wx.getUserInfo({",
      "\twithCredentials: '${1:false}',",
      "\tlang: '${2:zh_CN}',",
      "\ttimeout:${3:10000},",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "当用户未授权过，调用该接口将直接报错；当用户授权过，可以使用该接口获取用户信息"
  },
  "wx.faceVerifyForPay": {
    "prefix": "wx-faceVerifyForPay",
    "body": [
      "wx.faceVerifyForPay({",
      "\tscene: '${1}',",
      "\tpackage: '${2}',",
      "\tpackageSign: '${3}',",
      "\totherVerifyTitle: '${4}',",
      "\tsuccess: (result)=>{",
      "\t\t${5}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "支付各个安全场景验证人脸。"
  },
  "wx.requestPayment": {
    "prefix": "wx-requestPayment",
    "body": [
      "wx.requestPayment({",
      "\ttimeStamp: '${1}',",
      "\tnonceStr: '${2}',",
      "\tpackage: '${3}',",
      "\tsignType: '${4}',",
      "\tpaySign: '${5}',",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "发起微信支付。"
  },
  "wx.showShareMenu": {
    "prefix": "wx-showShareMenu",
    "body": [
      "wx.showShareMenu({",
      "\twithShareTicket: ${1:false}",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "显示当前页面的转发按钮"
  },
  "wx.hideShareMenu": {
    "prefix": "wx-hideShareMenu",
    "body": [
      "wx.hideShareMenu({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "隐藏转发按钮"
  },
  "wx.updateShareMenu": {
    "prefix": "wx-updateShareMenu",
    "body": [
      "wx.updateShareMenu({",
      "\twithShareTicket: ${1:false}",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "更新转发属性"
  },
  "wx.getShareInfo": {
    "prefix": "wx-getShareInfo",
    "body": [
      "wx.getShareInfo({",
      "\tshareTicket: ${1},",
      "\ttimeout:${2:10000},",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取转发详细信息"
  },
  "wx.getAccountInfoSync": {
    "prefix": "wx-getAccountInfoSync",
    "body": ["${1:let accInfo = }wx.getAccountInfoSync();"],
    "description": "获取当前账号信息"
  },
  "wx.chooseAddress": {
    "prefix": "wx-chooseAddress",
    "body": [
      "wx.chooseAddress({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。"
  },
  "wx.addCard": {
    "prefix": "wx-addCard",
    "body": [
      "wx.addCard({",
      "\tcardList: [${1}],",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "批量添加卡券"
  },
  "wx.openCard": {
    "prefix": "wx-openCard",
    "body": [
      "wx.openCard({",
      "\tcardList: [${1}],",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "查看微信卡包中的卡券"
  },
  "wx.openSetting": {
    "prefix": "wx-openSetting",
    "body": [
      "wx.openSetting({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "调起客户端小程序设置界面，返回用户设置的操作结果"
  },
  "wx.getSetting": {
    "prefix": "wx-getSetting",
    "body": [
      "wx.getSetting({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取用户的当前设置"
  },
  "wx.getWeRunData": {
    "prefix": "wx-getWeRunData",
    "body": [
      "wx.getWeRunData({",
      "\ttimeout:${1:10000},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取用户过去三十天微信运动步数，需要先调用 wx.login 接口"
  },
  "wx.navigateToMiniProgram": {
    "prefix": "wx-navigateToMiniProgram",
    "body": [
      "wx.navigateToMiniProgram({",
      "\tappId:'${1}',",
      "\tpath:'${2}',",
      "\textraData:{${3}},",
      "\tenvVersion:'${4:release}',",
      "\tsuccess: (result)=>{",
      "\t\t${5}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "打开同一公众号下关联的另一个小程序"
  },
  "wx.navigateBackMiniProgram": {
    "prefix": "wx-navigateBackMiniProgram",
    "body": [
      "wx.navigateBackMiniProgram({",
      "\textraData:{${1}},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功"
  },
  "wx.chooseInvoice": {
    "prefix": "wx-chooseInvoice",
    "body": [
      "wx.chooseInvoice({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "选择用户已有的发票"
  },
  "wx.chooseInvoiceTitle": {
    "prefix": "wx-chooseInvoiceTitle",
    "body": [
      "wx.chooseInvoiceTitle({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "选择用户的发票抬头"
  },
  "wx.checkIsSupportSoterAuthentication": {
    "prefix": "wx-checkIsSupportSoterAuthentication",
    "body": [
      "wx.checkIsSupportSoterAuthentication({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取本机支持的SOTER生物认证方式"
  },
  "wx.startSoterAuthentication": {
    "prefix": "wx-startSoterAuthentication",
    "body": [
      "wx.startSoterAuthentication({",
      "\trequestAuthModes:['fingerPrint'],",
      "\tchallenge:'${1}',",
      "\tauthContent:'${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "开始SOTER生物认证"
  },
  "wx.checkIsSoterEnrolledInDevice": {
    "prefix": "wx-checkIsSoterEnrolledInDevice",
    "body": [
      "wx.checkIsSoterEnrolledInDevice({",
      "\tcheckAuthMode:{${1}},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取设备内是否录入如指纹等生物信息的接口"
  },
  "wx.getUpdateManager": {
    "prefix": "wx-getUpdateManager",
    "body": ["${1:let updateManager = }wx.getUpdateManager();"],
    "description": "获取全局唯一的版本更新管理器，用于管理小程序更新。"
  },
  "updateManager.onCheckForUpdate": {
    "prefix": "updateManager-onCheckForUpdate",
    "body": ["updateManager.onCheckForUpdate((result) => {${1}});"],
    "description": "当向微信后台请求完新版本信息，会进行回调"
  },
  "updateManager.onUpdateReady": {
    "prefix": "updateManager-onUpdateReady",
    "body": ["updateManager.onUpdateReady((result) => {${1}});"],
    "description": "当新版本下载完成，会进行回调"
  },
  "updateManager.onUpdateFailed": {
    "prefix": "updateManager-onUpdateFailed",
    "body": ["updateManager.onUpdateFailed((result) => {${1}});"],
    "description": "当新版本下载失败，会进行回调"
  },
  "updateManager.applyUpdate": {
    "prefix": "updateManager-applyUpdate",
    "body": ["updateManager.applyUpdate();"],
    "description": "当新版本下载完成，调用该方法会强制当前小程序应用上新版本并重启"
  },
  "wx.createWorker": {
    "prefix": "wx-createWorker",
    "body": ["${1:let worker = }wx.createWorker(${1});"],
    "description": "创建一个Worker线程，并返回Worker实例，目前限制最多只能创建一个Worker，创建下一个Worker前请调用Worker.terminate。"
  },
  "worker.postMessage": {
    "prefix": "worker-postMessage",
    "body": ["worker.postMessage(${1});"],
    "description": "向Worker线程发送的消息。"
  },
  "worker.onMessage": {
    "prefix": "worker-onMessage",
    "body": ["worker.onMessage((result) => {${1}});"],
    "description": "监听Worker线程向当前线程发送的消息"
  },
  "worker.terminate": {
    "prefix": "worker-terminate",
    "body": ["worker.terminate();"],
    "description": "结束当前Worker线程，仅限在主线程Worker实例上调用。"
  },
  "wx.reportMonitor": {
    "prefix": "wx-reportMonitor",
    "body": ["wx.reportMonitor(${1:name},${2:value});"],
    "description": "自定义业务数据监控上报接口。"
  },
  "wx.setEnableDebug": {
    "prefix": "wx-setEnableDebug",
    "body": [
      "wx.setEnableDebug({",
      "\tenableDebug:{${1:true}},",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "设置是否打开调试开关，此开关对正式版也能生效"
  },
  "wx.getLogManager": {
    "prefix": "wx-getLogManager",
    "body": ["${1:let logger = }wx.getLogManager();"],
    "description": "获取日志管理器 logManager 对象。"
  },
  "logger.log": {
    "prefix": "logger-log",
    "body": ["logger.log(${1});"],
    "description": "写log日志，可以提供任意个参数。"
  },
  "logger.info": {
    "prefix": "logger-info",
    "body": ["logger.info(${1});"],
    "description": "写info日志，可以提供任意个参数。"
  },
  "logger.warn": {
    "prefix": "logger-warn",
    "body": ["logger.warn(${1});"],
    "description": "写warn日志，可以提供任意个参数。"
  },
  "logger.debug": {
    "prefix": "logger-debug",
    "body": ["logger.debug(${1});"],
    "description": "写debug日志，可以提供任意个参数。"
  },
  "wx.canvasToTempFilePath": {
    "prefix": "wx-canvasToTempFilePath",
    "body": [
      "wx.canvasToTempFilePath({",
      "\tx: ${1:0},",
      "\ty: ${2:0},",
      "\twidth: ${3},",
      "\theight: ${4},",
      "\tdestWidth: ${5},",
      "\tdestHeight: ${6},",
      "\tcanvasId: ${7},",
      "\tfileType: ${8:png},",
      "\tquality: ${9:1.0},",
      "\tsuccess: (result)=>{",
      "\t\t${10}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "}, this);"
    ],
    "description": "把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。"
  },
  "wx.canvasGetImageData": {
    "prefix": "wx-canvasGetImageData",
    "body": [
      "wx.canvasGetImageData({",
      "\tcanvasId: ${1},",
      "\tx: ${2:0},",
      "\ty: ${3:0},",
      "\twidth: ${4},",
      "\theight: ${5},",
      "\tsuccess: (result)=>{",
      "\t\t${6}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "}, this);"
    ],
    "description": "返回一个数组，用来描述 canvas 区域隐含的像素数据。"
  },
  "wx.canvasPutImageData": {
    "prefix": "wx-canvasPutImageData",
    "body": [
      "wx.canvasPutImageData({",
      "\tcanvasId: ${1},",
      "\tdata: ${2},",
      "\tx: ${3},",
      "\ty: ${4},",
      "\twidth: ${5},",
      "\theight: ${6},",
      "\tsuccess: (result)=>{",
      "\t\t${7}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "}, this);"
    ],
    "description": "将像素数据绘制到画布的方法。"
  },
  "wx.createCanvasContext": {
    "prefix": "wx-createCanvasContext",
    "body": ["${1:let cvsCtx = }wx.createCanvasContext(${2:canvas-id}, this);"],
    "description": "创建 canvas 绘图上下文（指定 canvasId）。"
  },
  "cvsCtx.setFillStyle": {
    "prefix": "cvsCtx-setFillStyle",
    "body": ["cvsCtx.setFillStyle('${1}');"],
    "description": "设置填充色。"
  },
  "cvsCtx.fillStyle": {
    "prefix": "cvsCtx-fillStyle",
    "body": ["cvsCtx.fillStyle = ${1};"],
    "description": "设置填充色。基础库 1.9.90 起支持"
  },
  "cvsCtx.setStrokeStyle": {
    "prefix": "cvsCtx-setStrokeStyle",
    "body": ["cvsCtx.setStrokeStyle(${1});"],
    "description": "设置边框颜色。"
  },
  "cvsCtx.strokeStyle": {
    "prefix": "cvsCtx-strokeStyle",
    "body": ["cvsCtx.strokeStyle = ${1};"],
    "description": "设置边框颜色。基础库 1.9.90 起支持"
  },
  "cvsCtx.setShadow": {
    "prefix": "cvsCtx-setShadow",
    "body": [
      "cvsCtx.setShadow(${1:offsetX}, ${2:offsetY}, ${3:blur}, ${4:color});"
    ],
    "description": "设置阴影样式。"
  },
  "cvsCtx.createLinearGradient": {
    "prefix": "cvsCtx-createLinearGradient",
    "body": [
      "cvsCtx.createLinearGradient(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1});"
    ],
    "description": "创建一个线性的渐变颜色。需要使用 addColorStop() 来指定渐变点，至少要两个。"
  },
  "cvsCtx.createCircularGradient": {
    "prefix": "cvsCtx-createCircularGradient",
    "body": ["cvsCtx.createCircularGradient(${1:x}, ${2:y}, ${3:r});"],
    "description": "创建一个圆形的渐变颜色。需要使用 addColorStop() 来指定渐变点，至少要两个。"
  },
  "cvsCtx.addColorStop": {
    "prefix": "cvsCtx-addColorStop",
    "body": ["cvsCtx.addColorStop(${1:stop(0 ~ 1)}, ${2:color});"],
    "description": "创建一个颜色的渐变点。"
  },
  "cvsCtx.setLineWidth": {
    "prefix": "cvsCtx-setLineWidth",
    "body": ["cvsCtx.setLineWidth(${1});"],
    "description": "设置线条的宽度。"
  },
  "cvsCtx.lineWidth": {
    "prefix": "cvsCtx-lineWidth",
    "body": ["cvsCtx.lineWidth = ${1};"],
    "description": "设置线条的宽度。基础库 1.9.90 起支持"
  },
  "cvsCtx.setLineCap": {
    "prefix": "cvsCtx-setLineCap",
    "body": ["cvsCtx.setLineCap('${1:butt}');"],
    "description": "设置线条的端点样式。"
  },
  "cvsCtx.lineCap": {
    "prefix": "cvsCtx-lineCap",
    "body": ["cvsCtx.lineCap = '${1:butt}';"],
    "description": "设置线条的端点样式。基础库 1.9.90 起支持"
  },
  "cvsCtx.setLineJoin": {
    "prefix": "cvsCtx-setLineJoin",
    "body": ["cvsCtx.setLineJoin('${1:bevel}');"],
    "description": "设置线条的交点样式。"
  },
  "cvsCtx.lineJoin": {
    "prefix": "cvsCtx-lineJoin",
    "body": ["cvsCtx.lineJoin = '${1:bevel}';"],
    "description": "设置线条的交点样式。基础库 1.9.90 起支持"
  },
  "cvsCtx.setLineDash": {
    "prefix": "cvsCtx-setLineDash",
    "body": ["cvsCtx.setLineDash([${1:pattern}], ${2:offset});"],
    "description": "设置线条的宽度。"
  },
  "cvsCtx.setMiterLimit": {
    "prefix": "cvsCtx-setMiterLimit",
    "body": ["cvsCtx.setMiterLimit(${1});"],
    "description": "设置最大斜接长度，斜接长度指的是在两条线交汇处内角和外角之间的距离。 当 setLineJoin() 为 miter 时才有效。"
  },
  "cvsCtx.rect": {
    "prefix": "cvsCtx-rect",
    "body": ["cvsCtx.rect(${1:x}, ${2:y}, ${3:width}, ${4:height});"],
    "description": "创建一个矩形。"
  },
  "cvsCtx.fillRect": {
    "prefix": "cvsCtx-fillRect",
    "body": ["cvsCtx.fillRect(${1:x}, ${2:y}, ${3:width}, ${4:height});"],
    "description": "填充一个矩形。"
  },
  "cvsCtx.strokeRect": {
    "prefix": "cvsCtx-strokeRect",
    "body": ["cvsCtx.strokeRect(${1:x}, ${2:y}, ${3:width}, ${4:height});"],
    "description": "画一个矩形(非填充)。"
  },
  "cvsCtx.clearRect": {
    "prefix": "cvsCtx-clearRect",
    "body": ["cvsCtx.clearRect(${1:x}, ${2:y}, ${3:width}, ${4:height});"],
    "description": "清除画布上在该矩形区域内的内容。"
  },
  "cvsCtx.fill": {
    "prefix": "cvsCtx-fill",
    "body": ["cvsCtx.fill();"],
    "description": "对当前路径中的内容进行填充。"
  },
  "cvsCtx.stroke": {
    "prefix": "cvsCtx-stroke",
    "body": ["cvsCtx.stroke();"],
    "description": "画出当前路径的边框。"
  },
  "cvsCtx.beginPath": {
    "prefix": "cvsCtx-beginPath",
    "body": ["cvsCtx.beginPath();"],
    "description": "开始创建一个路径，需要调用fill或者stroke才会使用路径进行填充或描边。"
  },
  "cvsCtx.closePath": {
    "prefix": "cvsCtx-closePath",
    "body": ["cvsCtx.closePath();"],
    "description": "关闭一个路径"
  },
  "cvsCtx.moveTo": {
    "prefix": "cvsCtx-moveTo",
    "body": ["cvsCtx.moveTo(${1:x}, ${2:y});"],
    "description": "把路径移动到画布中的指定点，不创建线条。"
  },
  "cvsCtx.lineTo": {
    "prefix": "cvsCtx-lineTo",
    "body": ["cvsCtx.lineTo(${1:x}, ${2:y});"],
    "description": "lineTo 方法增加一个新点，然后创建一条从上次指定点到目标点的线。"
  },
  "cvsCtx.arc": {
    "prefix": "cvsCtx-arc",
    "body": [
      "cvsCtx.arc(${1:x}, ${2:y}, ${3:r}, ${4:sAngle}, ${5:eAngle}, ${6:false});"
    ],
    "description": "画一条弧线。"
  },
  "cvsCtx.bezierCurveTo": {
    "prefix": "cvsCtx-bezierCurveTo",
    "body": [
      "cvsCtx.bezierCurveTo(${1:cp1x}, ${2:cp1y}, ${3:cp2x}, ${4:cp2y}, ${5:x}, ${6:y});"
    ],
    "description": "创建三次方贝塞尔曲线路径。曲线的起始点为路径中前一个点。"
  },
  "cvsCtx.quadraticCurveTo": {
    "prefix": "cvsCtx-quadraticCurveTo",
    "body": ["cvsCtx.quadraticCurveTo(${1:cpx}, ${2:cpy}, ${3:x}, ${4:y});"],
    "description": "创建二次贝塞尔曲线路径。曲线的起始点为路径中前一个点。"
  },
  "cvsCtx.scale": {
    "prefix": "cvsCtx-scale",
    "body": ["cvsCtx.scale(${1:scaleWidth}, ${2:scaleHeight});"],
    "description": "在调用scale方法后，之后创建的路径其横纵坐标会被缩放。多次调用scale，倍数会相乘。"
  },
  "cvsCtx.rotate": {
    "prefix": "cvsCtx-rotate",
    "body": ["cvsCtx.rotate(${1:degrees} * Math.PI/180);"],
    "description": "以原点为中心，原点可以用 translate方法修改。顺时针旋转当前坐标轴。"
  },
  "cvsCtx.translate": {
    "prefix": "cvsCtx-translate",
    "body": ["cvsCtx.translate(${1:x}, ${2:y});"],
    "description": "对当前坐标系的原点(0, 0)进行变换，默认的坐标系原点为页面左上角。"
  },
  "cvsCtx.clip": {
    "prefix": "cvsCtx-clip",
    "body": ["cvsCtx.clip();"],
    "description": "从原始画布中剪切任意形状和尺寸。"
  },
  "cvsCtx.setFontSize": {
    "prefix": "cvsCtx-setFontSize",
    "body": ["cvsCtx.setFontSize(${1:20});"],
    "description": "设置字体的字号。"
  },
  "cvsCtx.fillText": {
    "prefix": "cvsCtx-fillText",
    "body": ["cvsCtx.fillText('${1:text}', ${2:x}, ${3:y});"],
    "description": "在画布上绘制被填充的文本。"
  },
  "cvsCtx.setTextAlign": {
    "prefix": "cvsCtx-setTextAlign",
    "body": ["cvsCtx.setTextAlign('${1:center}');"],
    "description": "用于设置文字的对齐"
  },
  "cvsCtx.textAlign": {
    "prefix": "cvsCtx-textAlign",
    "body": ["cvsCtx.textAlign = '${1:center}';"],
    "description": "用于设置文字的对齐,基础库 1.9.90 起支持"
  },
  "cvsCtx.setTextBaseline": {
    "prefix": "cvsCtx-setTextBaseline",
    "body": ["cvsCtx.setTextBaseline('${1:middle}');"],
    "description": "用于设置文字的水平对齐"
  },
  "cvsCtx.textBaseline": {
    "prefix": "cvsCtx-textBaseline",
    "body": ["cvsCtx.textBaseline = '${1:middle}';"],
    "description": "用于设置文字的水平对齐,基础库 1.9.90 起支持"
  },
  "cvsCtx.drawImage": {
    "prefix": "cvsCtx-drawImage",
    "body": [
      "cvsCtx.drawImage(${1:imageResource}, ${2:dx}, ${3:dy}, ${4:dWidth}, ${5:dHeight});"
    ],
    "description": "绘制图像到画布。"
  },
  "cvsCtx.setGlobalAlpha": {
    "prefix": "cvsCtx-setGlobalAlpha",
    "body": ["cvsCtx.setGlobalAlpha(${1:1});"],
    "description": "设置全局画笔透明度。"
  },
  "cvsCtx.globalAlpha": {
    "prefix": "cvsCtx-globalAlpha",
    "body": ["cvsCtx.globalAlpha = ${1:1};"],
    "description": "设置全局画笔透明度。基础库 1.9.90 起支持"
  },
  "cvsCtx.save": {
    "prefix": "cvsCtx-save",
    "body": ["cvsCtx.save();"],
    "description": "保存当前的绘图上下文。"
  },
  "cvsCtx.restore": {
    "prefix": "cvsCtx-restore",
    "body": ["cvsCtx.restore();"],
    "description": "恢复之前保存的绘图上下文。"
  },
  "cvsCtx.draw": {
    "prefix": "cvsCtx-draw",
    "body": ["cvsCtx.draw(${1:true}, ${2:callback});"],
    "description": "将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中"
  },
  "cvsCtx.measureText": {
    "prefix": "cvsCtx-measureText",
    "body": ["${1:let metrics =}cvsCtx.measureText(${2});"],
    "description": "测量文本尺寸信息，目前仅返回文本宽度。同步接口。"
  },
  "cvsCtx.globalCompositeOperation": {
    "prefix": "cvsCtx-globalCompositeOperation",
    "body": ["cvsCtx.globalCompositeOperation = ${1};"],
    "description": "该属性是设置要在绘制新形状时应用的合成操作的类型。"
  },
  "cvsCtx.arcTo": {
    "prefix": "cvsCtx-arcTo",
    "body": ["cvsCtx.arcTo(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:radius});"],
    "description": "根据控制点和半径绘制圆弧路径。"
  },
  "cvsCtx.strokeText": {
    "prefix": "cvsCtx-strokeText",
    "body": ["cvsCtx.strokeText(${1:text}, ${2:x}, ${3:y});"],
    "description": "给定的 (x, y) 位置绘制文本描边的方法"
  },
  "cvsCtx.lineDashOffset": {
    "prefix": "cvsCtx-lineDashOffset",
    "body": ["cvsCtx.lineDashOffset = ${1:value};"],
    "description": "设置虚线偏移量的属性"
  },
  "cvsCtx.createPattern": {
    "prefix": "cvsCtx-createPattern",
    "body": ["cvsCtx.createPattern(${1:image}, ${2:repetition});"],
    "description": "对指定的图像创建模式的方法，可在指定的方向上重复元图像"
  },
  "cvsCtx.shadowBlur": {
    "prefix": "cvsCtx-shadowBlur",
    "body": ["cvsCtx.shadowBlur = ${1:value};"],
    "description": "设置阴影的模糊级别"
  },
  "cvsCtx.shadowColor": {
    "prefix": "cvsCtx-shadowColor",
    "body": ["cvsCtx.shadowColor = ${1:value};"],
    "description": "设置阴影的颜色"
  },
  "cvsCtx.shadowOffsetX": {
    "prefix": "cvsCtx-shadowOffsetX",
    "body": ["cvsCtx.shadowOffsetX = ${1:value};"],
    "description": "设置阴影相对于形状在水平方向的偏移"
  },
  "cvsCtx.shadowOffsetY": {
    "prefix": "cvsCtx-shadowOffsetY",
    "body": ["cvsCtx.shadowOffsetY = ${1:value};"],
    "description": "设置阴影相对于形状在竖直方向的偏移"
  },
  "cvsCtx.font": {
    "prefix": "cvsCtx-font",
    "body": [
      "cvsCtx.font = '${1:style}, ${2:weight}, ${3:size}, ${4:family}';"
    ],
    "description": "设置当前字体样式的属性"
  },
  "cvsCtx.setTransform": {
    "prefix": "cvsCtx-setTransform",
    "body": [
      "cvsCtx.setTransform(${1:scaleX}, ${2:skewX}, ${3:skewY}, ${4:scaleY}, ${5:translateX}, ${6:translateY});"
    ],
    "description": "使用矩阵重新设置（覆盖）当前变换的方法"
  },

  "wx.getFileSystemManager": {
    "prefix": "wx-getFileSystemManager",
    "body": ["${1:let fileManager = }wx.getFileSystemManager();"],
    "description": "获取全局唯一的文件管理器。"
  },
  "fileManager.appendFile": {
    "prefix": "fileManager-appendFile",
    "body": [
      "fileManager.appendFile({",
      "\tfilePath: '${1}',",
      "\tdata: '${2}',",
      "\tencoding:'${3:utf8}',",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "在文件结尾追加内容"
  },
  "fileManager.appendFileSync": {
    "prefix": "fileManager-appendFileSync",
    "body": [
      "try{",
      "\tfileManager.appendFileSync('${1}','${2}','${3:utf8}');",
      "}catch(e){",
      "\t${4}",
      "}"
    ],
    "description": "在文件结尾追加内容,同步接口"
  },
  "fileManager.access": {
    "prefix": "fileManager-access",
    "body": [
      "fileManager.access({",
      "\tpath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "判断文件/目录是否存在"
  },
  "fileManager.accessSync": {
    "prefix": "fileManager-accessSync",
    "body": [
      "try{",
      "\tfileManager.accessSync('${1}');",
      "}catch(e){",
      "\t${2}",
      "}"
    ],
    "description": "判断文件/目录是否存在,同步接口"
  },
  "fileManager.copyFile": {
    "prefix": "fileManager-copyFile",
    "body": [
      "fileManager.copyFile({",
      "\tsrcPath: '${1}',",
      "\tdestPath: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "复制文件"
  },
  "fileManager.copyFileSync": {
    "prefix": "fileManager-copyFileSync",
    "body": [
      "try{",
      "\tfileManager.copyFileSync('${1}','${2}');",
      "}catch(e){",
      "\t${3}",
      "}"
    ],
    "description": "复制文件,同步接口"
  },
  "fileManager.getSavedFileList": {
    "prefix": "fileManager-getSavedFileList",
    "body": [
      "fileManager.getSavedFileList({",
      "\tsuccess: (result)=>{",
      "\t\t${1}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取该小程序下已保存的本地缓存文件列表"
  },
  "fileManager.getFileInfo": {
    "prefix": "fileManager-getFileInfo",
    "body": [
      "fileManager.getFileInfo({",
      "\tfilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取该小程序下的 本地临时文件 或 本地缓存文件 信息"
  },
  "fileManager.mkdir": {
    "prefix": "fileManager-mkdir",
    "body": [
      "fileManager.mkdir({",
      "\tdirPath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "创建目录"
  },
  "fileManager.mkdirSync": {
    "prefix": "fileManager-mkdirSync",
    "body": [
      "try{",
      "\tfileManager.mkdirSync('${1}');",
      "}catch(e){",
      "\t${2}",
      "}"
    ],
    "description": "创建目录,同步接口"
  },
  "fileManager.removeSavedFile": {
    "prefix": "fileManager-removeSavedFile",
    "body": [
      "fileManager.removeSavedFile({",
      "\tfilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "删除该小程序下已保存的本地缓存文件"
  },
  "fileManager.readFile": {
    "prefix": "fileManager-readFile",
    "body": [
      "fileManager.readFile({",
      "\tfilePath: '${1}',",
      "\tencoding: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "读取本地文件内容"
  },
  "fileManager.readFileSync": {
    "prefix": "fileManager-readFileSync",
    "body": [
      "try{",
      "\tlet ${1:fileData} = fileManager.readFileSync('${2}','${3}');",
      "}catch(e){",
      "\t${4}",
      "}"
    ],
    "description": "读取本地文件内容,同步接口"
  },
  "fileManager.readdir": {
    "prefix": "fileManager-readdir",
    "body": [
      "fileManager.readdir({",
      "\tdirPath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "读取目录内文件列表"
  },
  "fileManager.readdirSync": {
    "prefix": "fileManager-readdirSync",
    "body": [
      "try{",
      "\tlet ${1:fileList} = fileManager.readdirSync('${2}');",
      "}catch(e){",
      "\t${3}",
      "}"
    ],
    "description": "读取目录内文件列表,同步接口"
  },
  "fileManager.rename": {
    "prefix": "fileManager-rename",
    "body": [
      "fileManager.rename({",
      "\toldPath: '${1}',",
      "\tnewPath: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "重命名文件，可以把文件从 oldPath 移动到 newPath"
  },
  "fileManager.renameSync": {
    "prefix": "fileManager-renameSync",
    "body": [
      "try{",
      "\tfileManager.renameSync('${1}','${2}');",
      "}catch(e){",
      "\t${3}",
      "}"
    ],
    "description": "重命名文件，可以把文件从 oldPath 移动到 newPath,同步接口"
  },
  "fileManager.rmdir": {
    "prefix": "fileManager-rmdir",
    "body": [
      "fileManager.rmdir({",
      "\tdirPath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "删除目录"
  },
  "fileManager.rmdirSync": {
    "prefix": "fileManager-rmdirSync",
    "body": [
      "try{",
      "\tfileManager.rmdirSync('${1}');",
      "}catch(e){",
      "\t${2}",
      "}"
    ],
    "description": "删除目录,同步接口"
  },
  "fileManager.saveFile": {
    "prefix": "fileManager-saveFile",
    "body": [
      "fileManager.saveFile({",
      "\ttempFilePath: '${1}',",
      "\tfilePath: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用"
  },
  "fileManager.saveFileSync": {
    "prefix": "fileManager-saveFileSync",
    "body": [
      "try{",
      "\tlet ${1:fileNumber} = fileManager.saveFileSync('${2}','${3}');",
      "}catch(e){",
      "\t${4}",
      "}"
    ],
    "description": "保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用,同步接口"
  },
  "fileManager.stat": {
    "prefix": "fileManager-stat",
    "body": [
      "fileManager.stat({",
      "\tpath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "获取文件 Stats 对象"
  },
  "fileManager.statSync": {
    "prefix": "fileManager-statSync",
    "body": [
      "try{",
      "\tlet ${1:fileStat} = fileManager.statSync('${2}');",
      "}catch(e){",
      "\t${3}",
      "}"
    ],
    "description": "获取文件 Stats 对象,同步接口"
  },
  "fileStat.isDirectory": {
    "prefix": "fileStat-isDirectory",
    "body": ["fileStat.isDirectory();"],
    "description": "判断当前文件是否一个目录"
  },
  "fileStat.isFile": {
    "prefix": "fileStat-isFile",
    "body": ["fileStat.isFile();"],
    "description": "判断当前文件是否一个普通文件"
  },
  "fileManager.unlink": {
    "prefix": "fileManager-unlink",
    "body": [
      "fileManager.unlink({",
      "\tfilePath: '${1}',",
      "\tsuccess: (result)=>{",
      "\t\t${2}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "删除文件"
  },
  "fileManager.unlinkSync": {
    "prefix": "fileManager-unlinkSync",
    "body": [
      "try{",
      "\tfileManager.unlinkSync('${1}');",
      "}catch(e){",
      "\t${2}",
      "}"
    ],
    "description": "删除文件,同步接口"
  },
  "fileManager.unzip": {
    "prefix": "fileManager-unzip",
    "body": [
      "fileManager.unzip({",
      "\tzipFilePath: '${1}',",
      "\ttargetPath: '${2}',",
      "\tsuccess: (result)=>{",
      "\t\t${3}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "解压文件"
  },
  "fileManager.writeFile": {
    "prefix": "fileManager-writeFile",
    "body": [
      "fileManager.writeFile({",
      "\tfilePath: '${1}',",
      "\tdata: '${2}',",
      "\tencoding: '${3:utf8}',",
      "\tsuccess: (result)=>{",
      "\t\t${4}",
      "\t},",
      "\tfail: ()=>{},",
      "\tcomplete: ()=>{}",
      "});"
    ],
    "description": "写文件"
  },
  "fileManager.writeFileSync": {
    "prefix": "fileManager-writeFileSync",
    "body": [
      "try{",
      "\tfileManager.writeFileSync('${1}','${2}','${3:utf8}');",
      "}catch(e){",
      "\t${4}",
      "}"
    ],
    "description": "写文件,同步接口"
  },

  "wx.nextTick": {
    "prefix": "wx-nextTick",
    "body": ["wx.nextTick(()=>{", "\t${1}", "});"],
    "description": "用于延迟一部分操作到下一个时间片再执行"
  },
  "wx.getMenuButtonBoundingClientRect": {
    "prefix": "wx-getMenuButtonBoundingClientRect",
    "body": ["let ${1:menuButton} = wx.getMenuButtonBoundingClientRect();"],
    "description": "获取菜单按钮的布局置信息"
  },
  "wx.createIntersectionObserver": {
    "prefix": "wx-createIntersectionObserver",
    "body": [
      "let ${1:interObser} = wx.createIntersectionObserver(${2:this},${3});"
    ],
    "description": "创建并返回一个 IntersectionObserver 对象实例"
  },
  "interObser.relativeTo": {
    "prefix": "interObser-relativeTo",
    "body": ["interObser.relativeTo(${1:selector},${2});"],
    "description": "使用选择器指定一个节点，作为参照区域之一"
  },
  "interObser.relativeToViewport": {
    "prefix": "interObser-relativeToViewport",
    "body": ["interObser.relativeToViewport(${1});"],
    "description": "指定页面显示区域作为参照区域之一"
  },
  "interObser.observe": {
    "prefix": "interObser-observe",
    "body": ["interObser.observe(${1:selector},(result)=>{", "\t${2}", "});"],
    "description": "指定目标节点并开始监听相交状态变化情况"
  },
  "interObser.disconnect": {
    "prefix": "interObser-disconnect",
    "body": ["interObser.disconnect();"],
    "description": "停止监听。回调函数将不再触发"
  },
  "wx.createSelectorQuery": {
    "prefix": "wx-createSelectorQuery",
    "body": ["let ${1:selQuery} = wx.createSelectorQuery();"],
    "description": "返回一个 SelectorQuery 对象实例。"
  },
  "selQuery.in": {
    "prefix": "selQuery-in",
    "body": ["selQuery.in(${1:this});"],
    "description": "将选择器的选取范围更改为自定义组件 component 内（初始时，选择器仅选取页面范围的节点，不会选取任何自定义组件中的节点）。"
  },
  "selQuery.select": {
    "prefix": "selQuery-select",
    "body": ["selQuery.select(${2:selector});"],
    "description": "在当前页面下选择第一个匹配选择器 selector 的节点，返回一个 NodesRef 对象实例，可以用于获取节点信息"
  },
  "selQuery.selectAll": {
    "prefix": "selQuery-selectAll",
    "body": ["selQuery.selectAll();"],
    "description": "在当前页面下选择匹配选择器 selector 的所有节点。"
  },
  "selQuery.selectViewport": {
    "prefix": "selQuery-selectViewport",
    "body": ["selQuery.selectViewport();"],
    "description": "选择显示区域，可用于获取显示区域的尺寸、滚动位置等信息。"
  },
  "selQuery.exec": {
    "prefix": "selQuery-exec",
    "body": ["selQuery.exec(result)=>{", "\t${1}", "});"],
    "description": "执行所有的请求，请求结果按请求次序构成数组，在callback的第一个参数中返回。"
  }
}
